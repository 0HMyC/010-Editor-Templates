//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: KHCVBL.bt
//   Authors: moddaman
//   Version: 1.0
//   Purpose: Parse cvbl model files used in Kingdom Hearts games.
//  Category: Kingdom Hearts
// File Mask: *.cvbl
//  ID Bytes: 
//   History: 
//------------------------------------------------

// Some1fromthedark's CVBL Converter python script was heavily refrenced when making
// this template, huge shoutout and thanks to him for making that tool and RE'ing the
// format as much as he did in the process. This template would not exist without his work.

#include "types.h"
LittleEndian();

typedef struct header
{
    u32 Field00 <format = hex, comment = "Magic bytes?">;
    u32 NumMeshes <name = "Mesh Count", comment = "Total number of meshes in file", bgcolor = 0xFF5555>;
    u16 num_animtex <comment = "Total number of meshes using animated textures (mostly certain)", bgcolor = 0x00AAAA>;
    u16 unknown_header_value <comment = "Name from converter script, unknown entries stored preceeding mesh entries if not 0; enables/disables animating textures?">;
    u32 Field0C; // Padding/Reserved?
};

typedef struct unknown_entry
{
    u32 Field00;
    u32 Field04;
    u32 Field08;
    u32 Field0C;
    u32 Field10;
    u32 Field14;
    u32 Field18;
    u32 Field1C;
};

typedef struct meshHeader
{
    u16 Field00;
    u16 joint_style <bgcolor = 0x8888FF>;
    s32 material <bgcolor = 0xCCCC00>;
    s32 Field08;
    u32 MeshOffset <format = hex, comment = "Where mesh data is located in file", bgcolor = 0x00FF00>;
};

typedef struct subsectionHeader
{
    u32 subsection_type <bgcolor = 0xFF55FF>;
    u32 subsection_length <bgcolor = 0xDD00DD>;
};

typedef struct submeshHeader
{
    u32 num_verts <bgcolor = 0x0000FF>;
    u32 Field04;
    u32 Field08 <comment = "Size/Length of some sort?">;
    u32 Field0C;
    u32 Field10;
    u32 Field14;
};

// smv == submeshVertex
typedef struct smv_Joint8
{
    f32 NormalX <bgcolor = 0x99FF33>;
    f32 NormalY <bgcolor = 0x99FF33>;
    f32 NormalZ <bgcolor = 0x99FF33>;
    u16 joint_slot_id <bgcolor = 0xDD9900>;
    u8 Field0E <comment = "Related to vertex order?">;
    u8 Field0F <comment = "Related to explicitly storing faces?">;
    f32 TexCoordX <bgcolor = 0x999999>;
    f32 TexCoordY <comment = "Inverted (relative to texture) by default", bgcolor = 0xBBBBBB>;
    f32 Field18;
    u32 Field1C;
    f32 VertX <bgcolor = 0x00CC00>;
    f32 VertY <bgcolor = 0x00CC00>;
    f32 VertZ <bgcolor = 0x00CC00>;
    f32 Weight <bgcolor = 0xFF00BB>;
};

typedef struct smv_Joint9
{
    f32 VertX <bgcolor = 0x00CC00>;
    f32 VertY <bgcolor = 0x00CC00>;
    f32 VertZ <bgcolor = 0x00CC00>;
    u16 joint_slot_id <bgcolor = 0xDD9900>;
    u8 Field0E <comment = "Related to vertex order?">;
    u8 Field0F <comment = "Related to explicitly storing faces?">;
};

// Common data shared across all jointUpdate joints
typedef struct ju_JointAll
{
    u32 joint_id <bgcolor = 0xFFFF00>;
    u32 joint_slot_id <bgcolor = 0xDD9900>;
};

typedef struct ju_Joint8 // "Excludes To-Local Transform"
{
    ju_JointAll Info;
    f32 Field08;
    f32 Field0C;
    f32 Field10;
    f32 Field14;
    f32 Field18;
    f32 Field1C;
    f32 Field20;
    f32 Field24;
    f32 Field28;
    f32 Field2C;
    f32 Field30;
    f32 Field34;
    f32 Field38;
    f32 Field3C;
    f32 Field40;
    f32 Field44;
    f32 Field48;
    f32 Field4C;
    f32 Field50;
    f32 Field54;
    f32 Field58;
    f32 Field5C;
    f32 Field60;
    f32 Field64;
    f32 Field68;
    f32 Field6C;
    f32 Field70;
    f32 Field74;
};

typedef struct ju_Joint9 // "Includes To-Local Transform"
{
    ju_JointAll Info;
    f32 Field08;
    f32 Field0C;
    f32 Field10;
    f32 Field14;
    f32 Field18;
    f32 Field1C;
    f32 Field20;
    f32 Field24;
    f32 Field28;
    f32 Field2C;
    f32 Field30;
    f32 Field34;
    f32 Field38;
    f32 Field3C;
    f32 Field40;
    f32 Field44;
    f32 Field48;
    f32 Field4C;
    f32 Field50;
    f32 Field54;
    f32 Field58;
    f32 Field5C;
    f32 Field60;
    f32 Field64;
    f32 Field68;
    f32 Field6C;
    f32 Field70;
    f32 Field74;
    f32 Field78;
    f32 Field7C;
    f32 Field80;
    f32 Field84;
    f32 Field88;
    f32 Field8C;
    f32 Field90;
    f32 Field94;
    f32 Field98;
    f32 Field9C;
    f32 FieldA0;
    f32 FieldA4;
    f32 FieldA8;
    f32 FieldAC;
    f32 FieldB0;
    f32 FieldB4;
};

typedef struct ju_Joint10 // "Shadow"
{
    ju_JointAll Info;
    f32 Field08;
    f32 Field0C;
    f32 Field10;
    f32 Field14;
    f32 Field18;
    f32 Field1C;
    f32 Field20;
    f32 Field24;
    f32 Field28;
    f32 Field2C;
    f32 Field30;
    f32 Field34;
    f32 Field38;
    f32 Field3C;
    f32 Field40;
    f32 Field44;
};

typedef struct
{
    meshHeader MeshMetadata <bgcolor = 0x00FFFF>;
    local int64 nextMeshPos = FTell();
    FSeek(MeshMetadata.MeshOffset + 16); // jump to mesh data, skipping padding?/seperators?
    local u8 endLoop = 0;
    while (FTell() < FileSize())
    {
        if (endLoop == 1) { break; }
        struct
        {
            // Printf("FTell: %02d", FTell());
            subsectionHeader Metadata;
            // Printf("Metadata.subsection_type: %02X\n", Metadata.subsection_type);
            if (Metadata.subsection_type != 1 && Metadata.subsection_type != 17)
            {
                if (Metadata.subsection_type != 32768)
                {
                    Printf("Unsupported subsection type!\n");
                }
                endLoop = 1;
                break;
            }
            switch (Metadata.subsection_type)
            {
                case 1:
                    submeshHeader submeshTest;
                    if (MeshMetadata.joint_style == 8)
                    {
                        smv_Joint8 Vertices[submeshTest.num_verts];
                    }
                    else if (MeshMetadata.joint_style == 10)
                    {
                        smv_Joint9 Vertices[submeshTest.num_verts];
                    }
                    else
                    {
                        u8 Data[Metadata.subsection_length - 32];
                    }
                    break;
                case 17:
                    if (MeshMetadata.joint_style == 8)
                    {
                        ju_Joint8 JointUpdate;
                        break;
                    }
                    else if (MeshMetadata.joint_style == 9)
                    {
                        ju_Joint9 JointUpdate;
                        break;
                    }
                    else if (MeshMetadata.joint_style == 10)
                    {
                        ju_Joint10 JointUpdate;
                        break;
                    }
                default: u8 Data[Metadata.subsection_length - 8];
            }
            
        } MeshSubsection <optimize = false>;
    }
    FSeek(nextMeshPos); // return to where next mesh entry header is
} meshEntry <optimize = false>;

typedef struct cvblData
{
    header CVBLHeader <name = "Header", bgcolor = 0x00FFFF>;
    if (CVBLHeader.unknown_header_value != 0)
    {
        unknown_entry UnkEntries[CVBLHeader.num_animtex] <comment = "Used for animated textures?", bgcolor = 0x00FFFF>;
        FSeek(16 + CVBLHeader.num_animtex * 32); // for safety
    }
    meshEntry MeshEntries[CVBLHeader.NumMeshes] <name = "MeshEntry", optimize = false>;
};

cvblData FILE;