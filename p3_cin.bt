//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: AtlusP3CIN.bt
//   Authors: moddaman
//   Version: 1.0
//   Purpose: Parsing .cin files from Persona 3
//  Category: Persona 3
// File Mask: *.cin
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "types.h"

LittleEndian();

enum<u8> segType
{
    UNK_00 = 0,
    UNK_01 = 1,
    UNK_07 = 7,
    UNK_19 = 25,
};

enum<u8> sectionType
{
    UNK_VISBOUNDS = 0, // Seems to define the bounds of the visible area for the anim?
    UNK_SEC_01 = 1, // Possibly used for UV's or something similar???
    CIN_ANIMATION = 2, // Mesh Animation Data
};

typedef struct cinHeader
{
    local int64 fPos = FTell();
    local char TestMagic[4] = ReadString(fPos, 4);
    if (TestMagic != "CIN")
    {
        Printf("CIN Magic not detected! File may be malformed or incorrect format!\n");
        segType SegmentTypes[26]; // "Skip" over bytes not in old version
    }
    else
    {
        char Magic[4];
        segType SegmentTypes[28];
    }
    
    
};

typedef struct multiplyMat
{
    u16 Red;
    // I didn't confirm that this field is actually Green but like, red and blue are
    // confirmed and it fits the typical RGBA pattern, its not like this is gonna be.
    // yellow or smth LMAO :3
    u16 Green;
    u16 Blue;
    u16 Alpha;
};

typedef struct UnknownChunk
{
    sectionType SectionID <comment = "Defines chunk type?">;
    if (SectionID >= 3)
        Printf("[0x%X:UnknownChunk] Unknown SectionID value 0x%X!\n", FTell() - 1, SectionID);
    s8 Field01 <comment = "Probably ID of object to animate? Gets very broken when forced to incorrect values">;
    if (Field01 != 1 && Field01 != -1)
        Printf("[0x%X:UnknownChunk] Field01 is not 1 or -1! Value: %d\n", FTell() - 1, Field01);
    multiplyMat Material <bgcolor = 0x55FF55, comment = "Affects colour and transparency of object">;
    // These seem to define the X and Y coordinates for the current "vertex"
    // of an animated object; given that CIN's work with 2D animations you'd expect
    // there would be 4 of these for a quad or 6 for a triangulated square, but
    // there are actually 5 vertices per-frame of animation defined???
    // TODO: Figure that out!!!
    s16 VertX <bgcolor = 0xCC55FF, comment = "Vertex X Coordinate? Range -650 to 650?">;
    s16 VertY <bgcolor = 0xCC55FF, comment = "Vertex Y Coordinate? Range -650 to 650?">;
    /*
    if (VertX >= 640)
        Printf("[0x%X:UnknownChunk] VertX outside framebuffer!\n", FTell() - 4);
    if (VertY >= 448)
        Printf("[0x%X:UnknownChunk] VertY outside framebuffer!\n", FTell() - 2);
    */
    s16 Field0E <bgcolor = 0x00FFFF>;
    s16 Field10 <bgcolor = 0x00FFFF>;
    if (Field0E != 0)
        Printf("[0x%X:UnknownChunk] Field0E Has value %03d assigned!\n", FTell() - 4, Field0E);
    if (Field10 != 0)
        Printf("[0x%X:UnknownChunk] Field10 Has value %03d assigned!\n", FTell() - 2, Field10);
};

typedef struct cin
{
    cinHeader Header;
    FSeek(FTell() + 10);
    while(FTell() < FileSize())
    {
        UnknownChunk Test <bgcolor = 0xDDDD00>;
    }
};

cin FILE;