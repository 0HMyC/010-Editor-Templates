//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: AtlusP3CIN.bt
//   Authors: moddaman
//   Version: 1.0
//   Purpose: Parsing .cin files from Persona 3
//  Category: Persona 3
// File Mask: *.cin
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "types.h"

LittleEndian();

enum<u8> segType
{
    UNK_00 = 0,
    UNK_01 = 1,
    UNK_07 = 7,
    UNK_19 = 25,
};

enum<u8> sectionType
{
    UNK_SEC_00 = 0,    
    UNK_SEC_01 = 1,
    UNC_ANIMATION = 2, // Animation Data
};

typedef struct cinHeader
{
    char Magic[4];
    segType SegmentTypes[28];
};

typedef struct multiplyMat
{
    u16 Red <bgcolor = 0x5555FF>;
    // I didn't confirm that this field is actually Green but like, red and blue are
    // confirmed and it fits the typical RGBA pattern, its not like this is gonna be.
    // yellow or smth LMAO :3
    u16 Green <bgcolor = 0x55FF55>;
    u16 Blue <bgcolor = 0xFF5555>;
    u16 Alpha <bgcolor = 0xCCCCCC>;
};

typedef struct UnknownChunk7
{
    sectionType SectionID <comment = "Defines chunk type?">;
    u8 Field01;
    multiplyMat Material <comment = "Affects colour and transparency of object">;
    u16 Field0A <bgcolor = 0x00FFFF, comment = "X Coord? Used for position or mesh definition?">;
    // TODO: The values used to check if Field0A and Field0C
    // go out of bounds of screen width/height (assuming they are POS coords)
    // are not based on P3's framebuffer size but instead the generic 640x480
    // This is inaccurate and I need to replace those numbers with accurate ones kk
    if (Field0A >= 640)
        Printf("[0x%X:UnknownChunk7] Field0A greater than \"max\" width!\n", FTell() - 2);
    s16 Field0C <bgcolor = 0x00FFFF, comment = "Y Coord? Used for position or mesh definition?">;
    if (Field0C >= 480)
        Printf("[0x%X:UnknownChunk7] Field0C greater than \"max\" height!\n", FTell() - 2);
    u16 Field0E <bgcolor = 0x00FFFF>;
    u16 Field10 <bgcolor = 0x00FFFF>;
};

/*// Dunno what this does; seems to be a list of constant
// 0x00000000 0x00000000 0x000000FF 0x00000000 0x0000
typedef struct UnknownChunk1
{
    u32 Field00;
    u32 Field04;
    u32 Field08 <format = hex>;
    u32 Field0C;
    u16 Field10;
};

typedef struct unknownSeperator7
{
    u16 Field00 <format = hex>;
    u32 Field02;
    u32 Field06;
    u32 Field0A;
    u32 Field0E;
};

typedef struct unknownSeperator7a
{
    u16 Field00 <format = hex>;
    u32 Field02;
    u16 Field06;
};

typedef struct UnknownSegment0(u8 fixSeek)
{
    local u32 segEnd;
    while (true)
    {
        segEnd = ReadUInt(FTell() + 8);
        if (segEnd != 0xFF000000)
        {
            if (segEnd == 0xFE000000)
            {
                UnknownChunk1 unkChunkEnd;
            }
            if (fixSeek)
            {
                local int64 pos = FTell();
                Printf("UnknownSegment0 end at 0x%X before different segment! Will seek to 0x%X!\n", pos, pos + 10);
                FSeek(pos + 10);
            }
            break;
        }
        else
        {
            UnknownChunk1 unkChunk;
        }
    }
};

typedef struct UnknownSegment1(u8 fixSeek)
{
    while (true)
    {
        UnknownChunk1 unkChunk;
        if (unkChunk.Field08 == 0xFE000000)
        {
            local int64 pos = FTell();
            Printf("End of chunk detected! 0x%X\n", pos - 10);
            if (fixSeek)
            {
                Printf("UnknownSegment1 end at 0x%X before different segment! Will seek to 0x%X!\n", pos, pos + 10);                FSeek(pos + 10);
            }
            break;
        }
    }
};

typedef struct UnknownSegment7
{
    local u32 checkSep;
    local u8 curSection = 0;
    local u8 addAmt = 0;
    while (true) {
        checkSep = ReadUInt();
        if (checkSep == 0xFF00) {
            unknownSeperator7 unkSep;
            curSection += addAmt;
        }
        else if (checkSep == 0xFE00) {
            unknownSeperator7 unkSep;
            if (curSection < 3) {
                curSection += addAmt;
            }
            else {
                unknownSeperator7a unkSepEnd;
                break;
            }
        }
        else {
            UnknownChunk7 unkChunk;
            // Printf("0x%X UnknownChunk7 - SectionID: %d\n", FTell() - 18, unkChunk.SectionID);
            //if (unkChunk.Material.Red != 15 && unkChunk.Material.Red != 255)
            //    Printf("0x%X UnknownChunk7 - Field02: %d\n", FTell() - 16, unkChunk.Field02);
            if (addAmt != unkChunk.SectionID)
                addAmt = unkChunk.SectionID;
        }
    }
};

void loadSegmentType(u8 segID, u8 doFix)
{
    switch (segID)
    {
        case UNK_00:
            if (FileSize() > (FTell() + 18))
            {
                UnknownSegment0 Segment0(doFix) <bgcolor = 0x00AAAA>;
            }
            break;
        case UNK_01: UnknownSegment1 Segment1(doFix) <bgcolor = 0x00FFFF>; break;
        case UNK_07: UnknownSegment7 Segment7 <bgcolor = 0xDDDD00, comment = "Probably for animation data?">; break;
        case UNK_19: UnknownSegment7 Segment25 <bgcolor = 0xFF0000>; break;
        default: Printf("segType %d not currently supported!\n", segID); break;
    }
}*/

typedef struct cin
{
    cinHeader Header;
    FSeek(FTell() + 10);
    while(FTell() < FileSize())
    {
        UnknownChunk7 Test <bgcolor = 0xDDDD00>;
        //FSeek(FTell() + 18);
    }
    /*local u8 i;
    for (i = 0; i < 28; i++)
    {
        if (i <= 26 && Header.SegmentTypes[i + 1] != UNK_00)
        {
            loadSegmentType(Header.SegmentTypes[i], true);
        }
        else
        {
            loadSegmentType(Header.SegmentTypes[i], false);
        }
    }*/
};

cin FILE;