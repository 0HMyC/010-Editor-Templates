//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: AtlusFieldNPCPack_P3P.bt
//   Authors: moddaman
//   Version: 1.0
//   Purpose: Parse Field NPC *_pck.dat files.
//  Category: Persona 3 Portable
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "types.h"
LittleEndian();

enum<u8> chID
{
    Makoto = 1,
    Yukari = 2,
    Aigis = 3,
    Mitsuru = 4,
    Junpei = 5,
    Fuuka = 6,
    Akihiko = 7,
    Ken = 8,
    Shinji = 9,
    Koromaru = 10,
    Ikutsuki = 11,
    Ryoji = 13,
    Takaya = 17,
    Yuko = 21,
    Chihiro = 27,
    Rio = 29,
    Tanaka = 36,
    Toriumi = 43,
    Kotone = 99,
    Kashiwagi = 132,
    Margaret = 213,
    Vincent = 214,
};

typedef struct packHeader
{
    u32 Magic <format=hex, comment = "Could be a version number, not certain", bgcolor=0x00BB00>;
    u32 TotalSegments <comment = "Increments by 0x10", bgcolor=0xFF0000>;
};

typedef struct chunkSep
{
    u32 Field00 <format=hex, comment = "Always 0xFFFF0000?">;
    u32 Field04 <format=hex, comment = "Always 0x0000E803?">;
    u32 Field08 <format=hex, comment = "Always 0xFFFFFFFF?">;
    u32 Field0C <format=hex, comment = "Always 0x00000000?">;
};

typedef struct chunkNPC
{
    // Quick fix for files with incorrect Segment counts
    // TODO: Better fix + figure out 0x7805 ones
    if (ReadUShort(FTell() + 6) != 1000 && ReadUShort(FTell() + 6) != 1400)
    {
        FSeek(FTell() + 8);
        return;
    }
    u32 PositionID <bgcolor=0x00FF00>;
    chID TexCharID <comment = "nX_0_0_0.tmx", bgcolor=0xFF77FF>;
    u8 TexVarID <comment = "n0_X_0_0.tmx", bgcolor=0xDD55DD>;
    u16 Field06 <format=hex, comment = "Always 0xE803?", bgcolor=0x0000FF>;
    u32 ProcedureIndex <comment = "Calls script procedure from corresponding BF file", bgcolor=0xFFFF00>;
    u32 ShowOnFlag <comment = "Shows NPC if bitflag is enabled", bgcolor=0x0077FF>;
};

// Check if the next segment of 0x10 bytes is an NPC Chunk Seperator
ubyte isNextStart(int64 fPos)
{
    if (ReadUInt() == 65535 && ReadUInt(fPos + 4) == 65536000 && ReadUInt(fPos + 8) == -1 && ReadUInt(fPos + 12) == 0)
    {
        return 1;
    }
    return 0;
}

typedef struct npcGroup(u8 atEOF)
{
    chunkSep Seperator <name = "Seperator", comment = "Seperates NPC Groups", bgcolor=0x0000FF>;
    if (atEOF == 0)
    {
        while (isNextStart(FTell()) == 0)
        {
            chunkNPC NPC <name = "NPC">;
        }
    }
};

typedef struct chunkArr(u32 tot)
{
    local u32 endPos = (tot * 16) + 8;
    if (FileSize() < endPos)
    {
        endPos = FileSize();
    }
    while (FTell() < endPos)
    {
        if (FTell() + 16 >= endPos)
        {
            npcGroup GroupNPC(1) <name = "Group">;
        }
        else
        {
            npcGroup GroupNPC(0) <name = "Group">;
        }
    }
};

typedef struct npcPackDAT
{
    packHeader Hed <name = "Header">;
    chunkArr AllChunks(Hed.TotalSegments) <name = "NPC Groups">;
    if (FTell() < FileSize())
        u32 HeaderDupe[(FileSize() - FTell()) / 4] <name = "Duplicate Bytes", bgcolor=0x0000FF, comment = "Unused, can be ignored">;
};

npcPackDAT FILE;