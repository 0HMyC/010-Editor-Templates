//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: AtlusFieldNPCPack_P3P.bt
//   Authors: moddaman
//   Version: 1.0
//   Purpose: Parse Field NPC *_pck.dat files.
//  Category: Persona 3 Portable
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef ubyte u8;
typedef ushort u16;
typedef uint u32;

typedef struct packHeader
{
    u32 Magic <format=hex, comment = "Could be a version number, not certain", bgcolor=0x00FF00>;
    u32 TotalSegments <comment = "Increments by 0x10", bgcolor=0xFF0000>;
};

typedef struct chunkSep
{
    u32 Field00 <format=hex, comment = "Always 0xFFFF0000?">;
    u32 Field04 <format=hex, comment = "Always 0x0000E803?">;
    u32 Field08 <format=hex, comment = "Always 0xFFFFFFFF?">;
    u32 Field0C <format=hex, comment = "Always 0x00000000?">;
};

typedef struct chunkNPC
{
    u32 PositionID <bgcolor=0x00FF00>;
    u8 TextureCharID <comment = "nX_0_0_0.tmx", bgcolor=0x7799FF>;
    u8 TextureVarID <comment = "n0_X_0_0.tmx", bgcolor=0x5577DD>;
    u16 Field06 <format=hex, comment = "Always 0xE803?", bgcolor=0x00FFFF>;
    u32 ProcedureIndex <comment = "Calls script procedure from corresponding BF file", bgcolor=0x00FF00>;
    u32 HideOnFlag <comment = "Hides NPC if bitflag is enabled", bgcolor=0x22FFFF>;
};

// Check if the next segment of 0x10 bytes is an NPC Chunk Seperator
ubyte isNextStart(int64 fPos)
{
    if (ReadUInt() == 65535 && ReadUInt(fPos + 4) == 65536000 && ReadUInt(fPos + 8) == -1 && ReadUInt(fPos + 12) == 0)
    {
        return 1;
    }
    return 0;
}

typedef struct npcGroup(u8 atEOF)
{
    chunkSep Seperator <name = "Seperator", bgcolor=0x0000FF, comment = "Seperates NPC Groups">;
    if (atEOF == 0)
    {
        while (isNextStart(FTell()) == 0)
        {
            chunkNPC NPC <name = "NPC">;
        }
    }
};

typedef struct chunkArr(u32 tot)
{
    while (FTell() < (tot * 16) + 8)
    {
        if (FTell() + 16 == (tot * 16) + 8)
        {
            npcGroup GroupNPC(1) <name = "Group">;
        }
        else
        {
            npcGroup GroupNPC(0) <name = "Group">;
        }
    }
};

typedef struct npcPackDAT
{
    packHeader Hed <name = "Header">;
    chunkArr AllChunks(Hed.TotalSegments) <name = "NPC Groups">;
    u32 HeaderDupe[(FileSize() - FTell()) / 4] <name = "Duplicate Bytes", bgcolor=0x0000FF, comment = "Unused, can be ignored">;
};

npcPackDAT FILE <name = "NPC Pack DAT">;