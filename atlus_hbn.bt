//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//   File: Atlus3DFieldHBN.bt
//   Authors: Tupelov, moddaman
//   Version: 1.0
//   Purpose: Parse 3D Field *.HBN files.
//  Category: Atlus
// File Mask: *.HBN
//  ID Bytes: 
//   History: 
//------------------------------------------------
#include "types.h"

typedef struct BigHeader
{
    u8 EntryIndex <name = "Entry Index", bgcolor=0x7700CC>;
    u8 Field01 <bgcolor = 0x00FFFF>;
    u16 Field02 <format=hex, bgcolor = 0x00FFFF>;
    u16 Field04 <format=hex, bgcolor = 0x00FFFF>;
    u16 Field06 <format=hex, bgcolor = 0x00FFFF>;
};

typedef struct LittleHeader
{
    u8 EntryIndex <name = "Entry Index", bgcolor=0x7700CC>;
    u8 Field01 <bgcolor = 0x00FFFF>;
    u16 Field02 <format=hex, bgcolor = 0x00FFFF>;
};

typedef struct
{
    BigHeader Header;
    struct
    {
        f32 YPos <name = "Y Pos", bgcolor=0x00FF00>;
        f32 ZPos <name = "Z Pos", bgcolor=0xFF0000>;
        f32 XPos <name = "X Pos", bgcolor=0xFF00FF>;
    } DefPos <name = "Position">;
    struct
    {
        f32 YHeight <name = "Y - Height", bgcolor=0x00CCAA>;
        f32 ZWidth <name = "Z - Width", bgcolor=0xCCAA00>;
        f32 XLength <name = "X - Length", bgcolor=0x6677EE>;
    } DefArea <name = "Area">;
    if (Header.Field01 != 0x34)
        Printf("0x%X - HBNEntryType1 Header.Field01: %d\n", FTell(), Header.Field01);
    if (Header.Field02 != 0)
        Printf("0x%X - HBNEntryType1 Header.Field02: %d\n", FTell(), Header.Field02);
    if (Header.Field04 != 0xFF)
        Printf("0x%X - HBNEntryType1 Header.Field04: %d\n", FTell(), Header.Field04);
    if (Header.Field06 != 0xA800)
        Printf("0x%X - HBNEntryType1 Header.Field06: %d\n", FTell(), Header.Field06);
} HBNEntryType1 <name = "Trigger Area Entries", comment = "Defines triggerable area">;

typedef struct
{
    LittleHeader Header;
    struct
    {
        f32 X <bgcolor=0xFF00FF>;
        f32 Y <bgcolor=0xFF0000>;
        f32 Z <bgcolor=0x00FF00>;
    } Position;
    f32 Rotation <bgcolor=0xFFFF00>;
    if (Header.Field01 != 56)
        Printf("0x%X - HBNEntryType2 Header.Field01: %d\n", FTell(), Header.Field01);
    if (Header.Field02 != 0)
        Printf("0x%X - HBNEntryType2 Header.Field02: %d\n", FTell(), Header.Field02);
} HBNEntryType2 <name = "Player Spawn Entries">;

typedef struct
{
    LittleHeader Header;
    f32 Field04 <comment = "X Pos?">;
    f32 Field08 <comment = "Z Pos?">;
    f32 Field0C <comment = "Y Pos?">;
    f32 Field10 <comment = "Rotation?">;
} HBNEntryType3 <name = "Type 3 Entries">;

typedef struct
{
    LittleHeader Header;
    f32 Field04 <comment = "X Pos?">;
    f32 Field08 <comment = "Z Pos?">;
    f32 Field0C <comment = "Y Pos?">;
    f32 Field10 <comment = "Possibly u32? Rotation?">;
} HBNEntryType4 <name = "Type 4 Entries">;

typedef struct
{
    LittleHeader Header;
    f32 Field04 <comment = "X Pos?">;
    f32 Field08 <comment = "Z Pos?">;
    f32 Field0C <comment = "Y Pos?">;
    f32 Field10 <comment = "Possibly u32? Rotation?">;
} HBNEntryType5 <name = "Type 5 Entries">;

typedef struct
{
    BigHeader Header;
    f32 Field08 <comment = "X Start?">;
    f32 Field0C <comment = "Z Start?">;
    f32 Field10 <comment = "Y Start?">;
    f32 Field14 <comment = "X End?">;
    f32 Field18 <comment = "Z End?">;
    f32 Field1C <comment = "Y End?">;
    if (Header.Field01 != 0x54)
        Printf("0x%X - HBNEntryType6 Header.Field01: %d\n", FTell(), Header.Field01);
    if (Header.Field02 != 7)
        Printf("0x%X - HBNEntryType6 Header.Field02: %d\n", FTell(), Header.Field02);
    if (Header.Field04 != -256)
        Printf("0x%X - HBNEntryType6 Header.Field04: %d\n", FTell(), Header.Field04);
    if (Header.Field06 != 0xA800)
        Printf("0x%X - HBNEntryType6 Header.Field06: %d\n", FTell(), Header.Field06);
} HBNEntryType6 <name = "Type 6 Entries">;

typedef struct
{
    LittleHeader Header;
    f32 Field04 <comment = "X Pos?">;
    f32 Field08 <comment = "Z Pos?">;
    f32 Field0C <comment = "Y Pos?">;
    f32 Field10 <comment = "Possibly u32? Rotation?">;
    Printf("HBNEntryType7 0x%X - Header.Field01: %d\n", FTell() - 19, Header.Field01);
    Printf("HBNEntryType7 0x%X - Header.Field02: %d\n", FTell() - 18, Header.Field02);
    Printf("HBNEntryType7 0x%X - Field04: %d\n", FTell() - 16, Field04);
    Printf("HBNEntryType7 0x%X - Field08: %d\n", FTell() - 12, Field08);
    Printf("HBNEntryType7 0x%X - Field0C: %d\n", FTell() - 8, Field0C);
    Printf("HBNEntryType7 0x%X - Field10: %d\n", FTell() - 4, Field10);
} HBNEntryType7 <name = "Type 7 Entries">;

typedef struct TypeListMetadata
{
    u32 Number <comment = "Number of entries for this type">;
    u32 EntrySize <comment = "Size in bytes(?) of one entry">;
};

typedef struct TypeList
{
    TypeListMetadata Type1 <name = "Type 1 Metadata">;
    TypeListMetadata Type2 <name = "Type 2 Metadata">;
    TypeListMetadata Type3 <name = "Type 3 Metadata">;
    TypeListMetadata Type4 <name = "Type 4 Metadata">;
    TypeListMetadata Type5 <name = "Type 5 Metadata">;
    TypeListMetadata Type6 <name = "Type 6 Metadata">;
    TypeListMetadata Type7 <name = "Type 7 Metadata">;
    TypeListMetadata Type8 <name = "Type 8 Metadata">;
};

typedef struct HBNHeader
{
    u32 Magic <format=hex>;
    struct
    {
        u16 Major <name = "Version Major Number">;
        u16 Minor <name = "Version Minor Number">;
    } Version;
};

typedef struct segF102
{
    u32 Unknown[3] <comment = "Padding?">;
    u32 Field0C <comment = "Segment identifier?">;
    u32 UnknownData[(FileSize() - FTell()) / 4] <bgcolor=0x0000FF, comment = "Varying types of data in here? Possibly debug?">;
};

u8 checkForSegF102(int64 fPos)
{
    if (ReadUInt(fPos + 12) == 753)
    {
        return 1;
    }
    return 0;
}

typedef struct HBNFile
{
    HBNHeader Header;
    Printf("Reading version %d.%d HBN!\n", Header.Version.Minor, Header.Version.Major);
    TypeListMetadata Type1;
    TypeListMetadata Type2;
    TypeListMetadata Type3;
    TypeListMetadata Type4;
    if (Header.Version.Major != 0)
    {
        TypeListMetadata Type5;
        TypeListMetadata Type6;
        TypeListMetadata Type7;
        TypeListMetadata Type8;
    }
    // TypeList EntryTypeList;
    // this is awful on the eyes but it stops 010 from throwing warnings
    if (Type1.Number > 0)
        HBNEntryType1 Entry1Data[ Type1.Number ];
    if (Type2.Number > 0)
        HBNEntryType2 Entry2Data[ Type2.Number ];
    if (Type3.Number > 0)
        HBNEntryType3 Entry3Data[ Type3.Number ];
    // Supposedly the following types are/can be used for chests/teleports?
    if (Type4.Number > 0)
        HBNEntryType4 Entry4Data[ Type4.Number ];
    if (Header.Version.Major != 0)
    {
        if (Type5.Number > 0)
            HBNEntryType5 Entry5Data[ Type5.Number ];
        if (Type6.Number > 0)
            HBNEntryType6 Entry6Data[ Type6.Number ];
        if (Type7.Number > 0)
            HBNEntryType7 Entry7Data[ Type7.Number ];
        if (Type8.Number > 0)
            u8 Entry8Data[ Type8.Number * Type8.EntrySize ];
    }
    // HBN's can have other and varying types of data after this point, we need to
    // dynamically check what that data is it seems
    if (checkForSegF102(FTell()))
    {
        segF102 UnknownSegment;
    }
    else
    {
        u32 UnknownData[(FileSize() - FTell()) / 4] <bgcolor=0x0000FF, comment = "Possibly debug data?">;
    }
};

HBNFile HBN;